<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vboar&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kass.top/"/>
  <updated>2016-03-15T13:36:21.515Z</updated>
  <id>http://blog.kass.top/</id>
  
  <author>
    <name>Justin Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>之前面试遇到的一道智力题</title>
    <link href="http://blog.kass.top/2016/03/04/a-brain-teaser-in-an-interview/"/>
    <id>http://blog.kass.top/2016/03/04/a-brain-teaser-in-an-interview/</id>
    <published>2016-03-04T04:20:31.000Z</published>
    <updated>2016-03-15T13:36:21.515Z</updated>
    
    <content type="html">&lt;p&gt;大二的时候参加了一次某外企实习生招聘的群面，其中有一道题目是智力题，题目大致就是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给一个瞎子52张扑克牌，并告诉他里面恰好有10张牌是正面朝上的。要求这个瞎子把牌分成两堆，使得每堆牌里正面朝上的牌的张数一样多。瞎子应该怎么做？（瞎子摸不出牌是正面或者是反面，但是却可以随意翻动每一张牌）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当给出这道题目的时候，我还不知道这究竟是道什么类型的题目，该往什么方向去思考。当时是三个人一组一起讨论，我们一开始的思路都是偏向于概率论之类的数学思维上…所以最后也没能找到正确的答案。后来面试结束的时候，有同学就赶紧百度，结果发现答案却如此简单，只要找对了方向就好…&lt;/p&gt;
&lt;p&gt;我们先把52张牌分成两堆A和B，A堆中10张，B堆中42张。那么假设A堆中有m张正面，则有(10-m)张反面，B堆中有n张正面，则有(42-n)张反面。我们知道，m+n=10。那么可以把A堆翻过来，那么有(10-m)张正面，m张反面。显然这时候10-m=n，所以两堆牌里正面朝上的牌数一样多。&lt;/p&gt;
&lt;p&gt;当时没想出来的原因主要还是被题目的条件迷惑到了，他说“使得每堆牌里正面朝上的牌的张数一样多”，这并不需要保证两堆牌中每堆正面的牌都是5张，只要相同就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大二的时候参加了一次某外企实习生招聘的群面，其中有一道题目是智力题，题目大致就是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给一个瞎子52张扑克牌，并告诉他里面恰好有10张牌是正面朝上的。要求这个瞎子把牌分成两堆，使得每堆牌里正面朝上的牌的张数一样多。瞎子应该怎么做？
    
    </summary>
    
    
      <category term="面试" scheme="http://blog.kass.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="智力题" scheme="http://blog.kass.top/tags/%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>同源策略和AJAX跨域请求的解决方案</title>
    <link href="http://blog.kass.top/2016/03/03/same-origin-policy-and-solutions-for-cross-origin-ajax-request/"/>
    <id>http://blog.kass.top/2016/03/03/same-origin-policy-and-solutions-for-cross-origin-ajax-request/</id>
    <published>2016-03-02T19:06:21.000Z</published>
    <updated>2016-03-15T13:36:24.813Z</updated>
    
    <content type="html">&lt;p&gt;之前写Web项目的时候一般都是用AJAX调用服务器提供的接口获得数据，但后来遇到了AJAX由于不同源而不用跨域请求的问题。为了实现AJAX跨域请求，我重新回顾了之前在《面向Web的计算》课上讲过的同源策略（Same Origin Policy, SOP），并了解AJAX跨域请求的几种常见的解决方案。结合网上的一些文章和参考资料，整理出下面的关于同源策略和AJAX跨域请求解决方案的笔记。&lt;/p&gt;
&lt;h3 id=&quot;同源策略（Same-Origin-Policy-SOP）&quot;&gt;&lt;a href=&quot;#同源策略（Same-Origin-Policy-SOP）&quot; class=&quot;headerlink&quot; title=&quot;同源策略（Same Origin Policy, SOP）&quot;&gt;&lt;/a&gt;同源策略（Same Origin Policy, SOP）&lt;/h3&gt;&lt;p&gt;同源策略，它是由 Netscape 提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。&lt;/p&gt;
&lt;p&gt;所谓同源，是指域名、协议、端口都相同。如果两个页面的域名、协议和端口都相同，那么这两个页面就同源，属于同一个域（Domain ）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top&lt;/a&gt; 和 &lt;a href=&quot;http://www.kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kass.top&lt;/a&gt; 不同源，因为域名不同&lt;br&gt;&lt;a href=&quot;http://kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top&lt;/a&gt; 和 &lt;a href=&quot;https://kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kass.top&lt;/a&gt; 不同源，因为协议不同&lt;br&gt;&lt;a href=&quot;http://kass.top:80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top:80&lt;/a&gt; 和 &lt;a href=&quot;http://kass.top:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top:8080&lt;/a&gt; 不同源，因为端口不同&lt;br&gt;&lt;a href=&quot;http://kass.top/tags&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top/tags&lt;/a&gt; 和 &lt;a href=&quot;http://kass.top/about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top/about&lt;/a&gt; 同源&lt;/p&gt;
&lt;p&gt;同源策略限制了一个源中加载文本或脚本与来自其他源中资源的交互方式，简单的说就是一个源上的JS 只能访问当前源的资源。不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。这些资源包括：DOM、通过AJAX请求的网络资源、cookie等。需要遵循同源策略的地方有：跨frame脚本、跨window脚本、cookie访问、XMLHttpRequest请求等。&lt;/p&gt;
&lt;p&gt;那为什么像script、style、img标签可以引入不同源的文本或脚本呢？因为同源策略本身是在Web前端的安全性和灵活性选择了一个平衡点，同源策略允许这些标签跨域引用资源而不必部署在同一台服务器上。&lt;/p&gt;
&lt;h4 id=&quot;如果不遵循同源策略，会这么样呢？&quot;&gt;&lt;a href=&quot;#如果不遵循同源策略，会这么样呢？&quot; class=&quot;headerlink&quot; title=&quot;如果不遵循同源策略，会这么样呢？&quot;&gt;&lt;/a&gt;如果不遵循同源策略，会这么样呢？&lt;/h4&gt;&lt;p&gt;1.链接跳转的问题：假设有一个钓鱼页面 &lt;a href=&quot;http://money.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://money.com/&lt;/a&gt; ，诱导用户在这个页面上打开 &lt;a href=&quot;http://www.alipay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alipay.com/&lt;/a&gt; （使用window.open打开），这时候钓鱼页面就可以获取支付宝页面窗口的句柄即window对象，即获得了对支付宝页面的控制权，账号密码什么的也就轻而易举地获得了。&lt;br&gt;2.AJAX请求的问题： 假设在 &lt;a href=&quot;http://money.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://money.com/&lt;/a&gt; 页面发起一个对 &lt;a href=&quot;http://www.alipay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alipay.com/&lt;/a&gt; 某接口的AJAX请求，如果不遵循同源策略，那么这样的请求是允许的，此次HTTP请求所带的cookie当然是 &lt;a href=&quot;http://www.alipay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alipay.com/&lt;/a&gt; 下的cookie，有了cookie，还有什么信息是不能获得的呢？&lt;/p&gt;
&lt;p&gt;可以看到，如果浏览器不遵循同源策略，将会存在很严重的安全性问题。但有的时候，我们需要在当前页面加载与其不同源的资源，比如AJAX跨域请求，在保证一定安全的情况下如何实现呢？&lt;/p&gt;
&lt;h3 id=&quot;AJAX跨域请求的解决方案&quot;&gt;&lt;a href=&quot;#AJAX跨域请求的解决方案&quot; class=&quot;headerlink&quot; title=&quot;AJAX跨域请求的解决方案&quot;&gt;&lt;/a&gt;AJAX跨域请求的解决方案&lt;/h3&gt;&lt;p&gt;AJAX（Asynchronous Javascript And XML），即异步Javascript和XML。AJAX的基础是XMLHttpRequest对象，之前提到过XMLHttpRequest对象是需要遵循同源策略的，所以AJAX跨域请求需要遵循同源策略。&lt;/p&gt;
&lt;p&gt;下面我们来验证一下AJAX的跨域请求。&lt;/p&gt;
&lt;p&gt;v1.com页面的代码如下，向v2.com发起一次AJAX请求。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//cdn.bootcss.com/jquery/2.2.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&quot;http://v2.com/&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;v2.com返回一个字符串success。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;控制台的输出结果如下，可以看到由于同源策略这样的AJAX跨域请求是不允许的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XMLHttpRequest cannot load http://v2.com/. No &amp;apos;Access-Control-Allow-Origin&amp;apos; header is present on the requested resource. Origin &amp;apos;http://v1.com&amp;apos; is therefore not allowed access.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么如何解决AJAX的跨域问题，实现AJAX的跨域请求呢？下面给出几种常见的解决方案。&lt;/p&gt;
&lt;h4 id=&quot;通过CORS进行跨域&quot;&gt;&lt;a href=&quot;#通过CORS进行跨域&quot; class=&quot;headerlink&quot; title=&quot;通过CORS进行跨域&quot;&gt;&lt;/a&gt;通过CORS进行跨域&lt;/h4&gt;&lt;p&gt;CORS（Cross-Origin Resource Sharing ），跨域资源共享，是W3C XMLHttpRequest Level 2 里规定的一种跨域方式。CORS定义了一种浏览器和服务器交互的方式来确定是否允许跨域请求。通过CORS实现AJAX跨域请求比较简单，只需要由服务器发送一个响应标头（Response Header）。&lt;/p&gt;
&lt;p&gt;如今基本上所有常用的浏览器都支持CORS（老IE除外），在 &lt;a href=&quot;http://caniuse.com/#feat=cors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caniuse.com/#feat=cors&lt;/a&gt; 中可以查询到浏览器对CORS的支持情况。可以看到，Chrome、Firefox、Safari、Opera、Edge、IE11以及移动设备浏览器等均支持CORS，所以我认为CORS可能是最好的实现AJAX跨域请求的解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;caniuse.com 是一个提供HTML5, CSS3, JS等新技术浏览器兼容一览表的网站，可以提高前端开发的工作效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过CORS实现AJAX跨域请求，需要服务器设置一个响应标头：设置Access-Control-Allow-Origin。&lt;/p&gt;
&lt;p&gt;HTTP头的设置方法有很多，下面以Apache和PHP为例：&lt;/p&gt;
&lt;p&gt;1.Apache：需要开启mod_headers模块，在配置文件中和.htaccess文件中均可以加入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置为*即允许所有其他域发起的AJAX请求当前服务器的数据，这样是非常不安全的，所以应该设置为我们需要允许请求数据的域：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Header set Access-Control-Allow-Origin &amp;quot;http://v1.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置完之后，当我们访问v1.com时，控制台再也没有错误提示了，能够成功地获取v2.com的数据。&lt;/p&gt;
&lt;p&gt;2.PHP：直接在PHP代码中设置就好了：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Origin: http://v1.com&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，nginx、tomcat等都可以设置HTTP头，更多的设置见 &lt;a href=&quot;http://enable-cors.org/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://enable-cors.org/server.html&lt;/a&gt; 。可以在 &lt;a href=&quot;http://client.cors-api.appspot.com/client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://client.cors-api.appspot.com/client&lt;/a&gt; 进行CORS的测试。&lt;/p&gt;
&lt;p&gt;通过CORS实现AJAX的跨域请求就这么简单，但有时候还是会遇到少数浏览器不兼容的情况，我们需要检测浏览器是否支持CORS，原生Javacript发送AJAX请求代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createCORSRequest = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;method, url&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;withCredentials&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xhr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断XMLHttpRequest对象中是否有withCredentials属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// withCredentials属性仅仅存在于XMLHTTPRequest2对象中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Chrome, Firefox, Opera and Safari 均使用XMLHTTPRequest2对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr.open(method, url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; XDomainRequest != &lt;span class=&quot;string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断是否是XDomainRequest对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// XDomainRequest对象只存在于IE中，是IE用来实现CORS跨域请求的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XDomainRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr.open(method, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 浏览器不支持CORS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xhr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&#39;http://v2.com&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = createCORSRequest(method, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!xhr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;CORS not supported&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Success code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; responseText = xhr.responseText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Error code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;There was an error!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;标准的CORS请求默认不发送任何cookies。为了发送请求时包含cookies，需要设置XMLHttpRequest对象的withCredentials属性：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xhr.withCredentials = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若使用jQuery则代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: &lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&quot;http://v2.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhrFields: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        withCredentials: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务器（PHP为例）同时也要设置相应的HTTP头：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Credentials: true&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;withCredentials属性会使请求中包含请求域（v2.com）中的所有cookies，返回的响应也会包含请求域（v2.com）中的所有cookies。但需要注意的是这些cookies仍然遵循同源策略，所以你的JS代码不能访问document.cookie或者response headers中的cookies。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5rocks.com/en/tutorials/cors/&lt;/a&gt; 中还提到simple requests和”not-so-simple requests” ，之后有时间再认真研究一下。&lt;/p&gt;
&lt;h4 id=&quot;使用JSONP实现跨域请求&quot;&gt;&lt;a href=&quot;#使用JSONP实现跨域请求&quot; class=&quot;headerlink&quot; title=&quot;使用JSONP实现跨域请求&quot;&gt;&lt;/a&gt;使用JSONP实现跨域请求&lt;/h4&gt;&lt;p&gt;JSONP的原理就是：因为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签是不受同源策略限制的，没有跨域限制，JSONP就是利用这点来实现跨域请求。当需要进行跨域请求时，JS脚本动态地添加&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的src属性指向所需地址，如生成&lt;code&gt;&amp;lt;script src=&amp;quot;http://v2.com&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;，然后JS和服务器约定一个回调函数名（默认为callback，不是callback的话需要以参数形式传给服务器），JS提供这个回调函数。服务器产生的响应为JSON数据的包装（即JSONP， JSON with Padding），如callback({“id”: 1, “name”, “vboar”})。这里的callback就是回调函数名，{“id”: 1, “name”, “vboar”}就是json数据，将作为callback函数的参数。这样的话，浏览器就会调用callback函数，并传递解析后的json对象作为参数，这样其实就能跨域接收数据了。&lt;/p&gt;
&lt;p&gt;用jQuery书写JSONP实现跨域请求的代码非常简单。&lt;/p&gt;
&lt;p&gt;前端JS代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&quot;http://v2.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jsonp: &lt;span class=&quot;string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataType: &lt;span class=&quot;string&quot;&gt;&quot;jsonp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后端PHP中不能直接返回JSON格式的数据，要返回 &lt;code&gt;回调函数(JSON数据)&lt;/code&gt; 这样形式的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;.json_encode($arr).&lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用原生Javascript代码实现也不困难：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; callbackName = &lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[callbackName] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; script = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script.src = &lt;span class=&quot;string&quot;&gt;&#39;http://v2.com?callback=&#39;&lt;/span&gt;+callbackName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码没有删除jsonp动态创建的节点，而jQuery方式会自动删除script节点。jQuery在onload/complete时，删除节点。除了删除节点，还需要删除节点上的属性吗？关于这点讨论，可以前往 &lt;a href=&quot;https://segmentfault.com/q/1010000000483131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/q/1010000000483131&lt;/a&gt; 查看。&lt;/p&gt;
&lt;p&gt;那JSONP和CORS实现跨域请求对比，两者又有什么优点和缺点呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CORS支持所有类型的HTTP请求，而JSON只支持GET请求；&lt;/li&gt;
&lt;li&gt;使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理；&lt;/li&gt;
&lt;li&gt;JSONP主要被老的浏览器支持（&amp;lt; IE8），它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现AJAX跨域请求还有其他的方案，但CORS和JSONP应该是目前最常用的两种解决方案了，而且CORS更先进更方便更灵活，应该是实现AJAX跨域请求的主流方案了，毕竟用IE老古董的人越来越少了呀。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript的同源策略 - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bbs.csdn.net/topics/390716390&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器同源策略 - CSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/4e17445d66e2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;同源策略——浏览器的安全卫士 - 流星狂飙 - 简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/25427931&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对于浏览器的同源策略你是怎样理解的呢？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://enable-cors.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;enable cross-origin resource sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using CORS - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/hfahe/article/details/7730944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5安全：CORS（跨域资源共享）简介 - 蒋宇捷 - CSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iefans.net/ie10-cors-for-xhr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IE10中的CORS for XHR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/f3840c8c02ba&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ajax - 跨域请求 - happyLindz - 简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is JSONP all about? - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/19966531&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSONP 的工作原理是什么？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000000483131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于JSONP的两点疑问 - SegmentFault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/9d0fb4f47cc0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript跨域问题小记 - 射覆 - 简书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前写Web项目的时候一般都是用AJAX调用服务器提供的接口获得数据，但后来遇到了AJAX由于不同源而不用跨域请求的问题。为了实现AJAX跨域请求，我重新回顾了之前在《面向Web的计算》课上讲过的同源策略（Same Origin Policy, SOP），并了解AJAX跨域
    
    </summary>
    
    
      <category term="Web" scheme="http://blog.kass.top/tags/Web/"/>
    
      <category term="安全" scheme="http://blog.kass.top/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="AJAX" scheme="http://blog.kass.top/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>真的开始写博客了&gt;_&lt;#</title>
    <link href="http://blog.kass.top/2016/03/02/start-up-my-blog/"/>
    <id>http://blog.kass.top/2016/03/02/start-up-my-blog/</id>
    <published>2016-03-02T08:01:17.000Z</published>
    <updated>2016-03-15T13:36:28.463Z</updated>
    
    <content type="html">&lt;p&gt;之前很多次都搭建了自己的博客，说要开始写博客，然而从大一都大三都没有实现= = 这几天忽然意识到自己真的已经大三了，而且要找实习了！！！然后发现自己两年多好像并没有学到什么东西…也就写了几个水水的大作业和项目。平时遇到什么问题和困难就百度谷歌一下，当时懂了就解决掉那个问题，然而过了很久之后…还是不懂…看别人写的技术博客感觉很有意思，然而过了很久什么都不记得…人懒啊，以至于读书笔记、学习笔记都不怎么写，更不用说博客了…那，去应聘的时候，我有什么资本说我很牛逼呢，凭什么让别人招了我。&lt;/p&gt;
&lt;p&gt;于是，这次真的下定决心了，即便花掉不少时间，也要认真地写博客，一是巩固自己对这方面的理解，二是将来可以回头看看，可以捡回来，说不定还有什么新的理解。&lt;/p&gt;
&lt;p&gt;新搭建的博客托管在GitHub Pages上。就近几天吧大致确定了自己未来的发展方向，目前暂时以Web前端开发为主吧，那博客的内容大多应该是围绕前端开发的吧= =&lt;/p&gt;
&lt;p&gt;最后希望自己能坚持下去，也希望内推面试要成功过啊！！！加油！！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前很多次都搭建了自己的博客，说要开始写博客，然而从大一都大三都没有实现= = 这几天忽然意识到自己真的已经大三了，而且要找实习了！！！然后发现自己两年多好像并没有学到什么东西…也就写了几个水水的大作业和项目。平时遇到什么问题和困难就百度谷歌一下，当时懂了就解决掉那个问题，
    
    </summary>
    
    
      <category term="日常" scheme="http://blog.kass.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
