<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vboar&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kass.top/"/>
  <updated>2016-03-23T16:38:53.925Z</updated>
  <id>http://blog.kass.top/</id>
  
  <author>
    <name>Justin Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《JavaScript 高级程序设计》阅读笔记</title>
    <link href="http://blog.kass.top/2016/03/15/reading-notes-for-professional-javascript/"/>
    <id>http://blog.kass.top/2016/03/15/reading-notes-for-professional-javascript/</id>
    <published>2016-03-15T08:02:00.000Z</published>
    <updated>2016-03-23T16:38:53.925Z</updated>
    
    <content type="html">&lt;h3 id=&quot;第1章-JavaScript-简介&quot;&gt;&lt;a href=&quot;#第1章-JavaScript-简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 JavaScript 简介&quot;&gt;&lt;/a&gt;第1章 JavaScript 简介&lt;/h3&gt;&lt;h4 id=&quot;JavaScript-和-ECMAScript：&quot;&gt;&lt;a href=&quot;#JavaScript-和-ECMAScript：&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 和 ECMAScript：&quot;&gt;&lt;/a&gt;JavaScript 和 ECMAScript：&lt;/h4&gt;&lt;p&gt;各浏览器将 ECMAScript 作为各自 JavaScript 实现的基础，而各浏览器的 JavaScript 实现又有所差异。&lt;/p&gt;
&lt;p&gt;一个完整的 JavaScript 实现由以下三个不同的部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心（ECMAScript）&lt;/li&gt;
&lt;li&gt;文档对象模型（DOM）&lt;/li&gt;
&lt;li&gt;浏览器对象模型（BOM）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ECMA-262 标准规定了这门语言的以下组成部分：语法、类型、语句、关键字、保留字、操作符、对象。ECMAScript 就是对实现该标准规定的各个方面内容的语言的描述。JavaScript 实现了 ECMAScript。&lt;/p&gt;
&lt;p&gt;ECMAScript 兼容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 ECMA-262 描述的所有“类型、值、对象、属性、函数以及程序句法和语义”&lt;/li&gt;
&lt;li&gt;支持 Unicode 字符标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兼容的实现还可以进行扩展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加 ECMA-262 没有描述的“更多类型、值、对象、属性和函数”&lt;/li&gt;
&lt;li&gt;支持 ECMA-262 没有定义的“程序和正则表达式语法”&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展：&lt;br&gt;&lt;a href=&quot;http://es6-features.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6新特性&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;文档对象模型（DOM）&quot;&gt;&lt;a href=&quot;#文档对象模型（DOM）&quot; class=&quot;headerlink&quot; title=&quot;文档对象模型（DOM）&quot;&gt;&lt;/a&gt;文档对象模型（DOM）&lt;/h4&gt;&lt;p&gt;文档对象模型，DOM，Document Object Model，是针对 XML 但经过扩展用于 HTML 的应用程序编程接口，提供访问和操作网页内容的方法和接口。DOM 把整个页面映射为一个多层节点结构。&lt;/p&gt;
&lt;p&gt;DOM级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM1级：由两个模块组成：DOM 核心和 DOM HTML。其中 DOM 核心规定如何映射基于 XML 的文档结构，DOM HTML 则在 DOM 核心的基础上加以扩展，添加了针对 HTML 的对象和方法。&lt;/li&gt;
&lt;li&gt;DOM2级：在原来 DOM 的基础上扩展：&lt;ul&gt;
&lt;li&gt;DOM 视图：定义了跟踪不同文档视图的接口&lt;/li&gt;
&lt;li&gt;DOM 事件：定义了事件和事件处理的接口&lt;/li&gt;
&lt;li&gt;DOM 样式：定义了基于CSS为元素应用样式的接口&lt;/li&gt;
&lt;li&gt;DOM 遍历和范围：定义了遍历和操作文档树的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM3级：进一步扩展 DOM：&lt;ul&gt;
&lt;li&gt;引入了以统一方式加载和保存文档的方法——在 DOM 加载和保存模块中定义&lt;/li&gt;
&lt;li&gt;新增了验证文档的方法——在 DOM 验证模块中定义&lt;/li&gt;
&lt;li&gt;对 DOM 核心进行扩展，开始支持 XML 1.0 规范&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;浏览器对象模型（BOM）&quot;&gt;&lt;a href=&quot;#浏览器对象模型（BOM）&quot; class=&quot;headerlink&quot; title=&quot;浏览器对象模型（BOM）&quot;&gt;&lt;/a&gt;浏览器对象模型（BOM）&lt;/h4&gt;&lt;p&gt;浏览器对象模型，BOM，Browser Object Model，提供与浏览器交互的方法和接口。BOM 作为 JavaScript 实现的一部分却没有相关的标准，但 HTML5 致力于把很多 BOM 功能写入规范。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：大多数浏览器在提及对 JavaScript 的支持情况时，一般都以 ECMAScript 兼容性和对 DOM 的支持情况为准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第2章-在-HTML-中使用-JavaScript&quot;&gt;&lt;a href=&quot;#第2章-在-HTML-中使用-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;第2章 在 HTML 中使用 JavaScript&quot;&gt;&lt;/a&gt;第2章 在 HTML 中使用 JavaScript&lt;/h3&gt;&lt;h4 id=&quot;script元素&quot;&gt;&lt;a href=&quot;#script元素&quot; class=&quot;headerlink&quot; title=&quot;script元素&quot;&gt;&lt;/a&gt;script元素&lt;/h4&gt;&lt;p&gt;HTML 4.01 为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 定义的6个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async：表示应该立即下载脚本，但不应妨碍页面中的其他操作，只对外部脚本文件有效&lt;/li&gt;
&lt;li&gt;charset：表示通过 src 属性指定的代码的字符集，但大多数浏览器会忽略这个值&lt;/li&gt;
&lt;li&gt;defer：表示脚本可以延迟到文档完全被解析和显示之后再执行，只对外部脚本文件有效，但IE7及更早版本对嵌入脚本也支持&lt;/li&gt;
&lt;li&gt;language：已废弃&lt;/li&gt;
&lt;li&gt;src：表示包含要执行代码的外部文件&lt;/li&gt;
&lt;li&gt;type：可以看成是 language 的替代属性，表示编写代码使用的脚本语言的内容类型（MIME 类型）。默认为 &lt;code&gt;text/javascript&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在解释器对&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素内部所有代码执行完前，页面的其余内容都不会被浏览器加载或显示。在解析外部 JavaScript 文件（包括下载该文件）时，页面的处理也会暂时停止。&lt;/p&gt;
&lt;p&gt;带有src属性的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。&lt;/p&gt;
&lt;p&gt;位于外部域中的代码也会被加载和解析，不受同源策略的限制。&lt;/p&gt;
&lt;h5 id=&quot;script标签的位置&quot;&gt;&lt;a href=&quot;#script标签的位置&quot; class=&quot;headerlink&quot; title=&quot;script标签的位置&quot;&gt;&lt;/a&gt;script标签的位置&lt;/h5&gt;&lt;p&gt;在文档的&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;元素中包含所有 JavaScript 文件，那么必须等全部 JavaScript 代码都被下载、解析和执行完成以后，才能开始呈现页面的内容。所以一般都把全部 JavaScript 引用放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;元素中页面内容的后面。&lt;/p&gt;
&lt;h5 id=&quot;延迟脚本&quot;&gt;&lt;a href=&quot;#延迟脚本&quot; class=&quot;headerlink&quot; title=&quot;延迟脚本&quot;&gt;&lt;/a&gt;延迟脚本&lt;/h5&gt;&lt;p&gt;defer属性则告诉浏览器立即下载脚本文件，但延迟执行。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HTML5 规范要求脚本按照出现的先后顺序执行。在现实中，延迟脚本并不一定会按照顺序执行，最好只包含一个延迟脚本。&lt;/p&gt;
&lt;h5 id=&quot;异步脚本&quot;&gt;&lt;a href=&quot;#异步脚本&quot; class=&quot;headerlink&quot; title=&quot;异步脚本&quot;&gt;&lt;/a&gt;异步脚本&lt;/h5&gt;&lt;p&gt;标记为 async 的脚本并不保证按照指定它们的先后顺序执行。执行async属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容，所以建议异步脚本不要再加载期间修改DOM。&lt;/p&gt;
&lt;p&gt;异步脚本一定会在页面的 load 事件前执行，但可能会在 DOMContentLoaded 事件触发之前或之后执行。&lt;/p&gt;
&lt;h5 id=&quot;嵌入代码与外部文件&quot;&gt;&lt;a href=&quot;#嵌入代码与外部文件&quot; class=&quot;headerlink&quot; title=&quot;嵌入代码与外部文件&quot;&gt;&lt;/a&gt;嵌入代码与外部文件&lt;/h5&gt;&lt;p&gt;与嵌入代码相比，使用外部文件的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可维护性&lt;/li&gt;
&lt;li&gt;可缓存：浏览器能够根据具体的设置缓存链接的所有外部 JavaScript 文件&lt;/li&gt;
&lt;li&gt;适应未来&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;文档模式&quot;&gt;&lt;a href=&quot;#文档模式&quot; class=&quot;headerlink&quot; title=&quot;文档模式&quot;&gt;&lt;/a&gt;文档模式&lt;/h4&gt;&lt;p&gt;文档模式是通过使用文档类型（DOCTYPE）切换实现的。&lt;/p&gt;
&lt;p&gt;几种文档模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;混杂模式（quirks mode）&lt;/li&gt;
&lt;li&gt;标准模式（standards mode）&lt;/li&gt;
&lt;li&gt;准标准模式（almost standards mode）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有文档类型声明，所有浏览器都会默认开启混杂模式。这是不可取的，因为没有兼容性可言，不同浏览器的显示和行为差异非常大。&lt;/p&gt;
&lt;p&gt;对于标准模式：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HTML 4.01 严格型 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- XHTML 1.0 严格型 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HTML 5 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于准标准模式：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HTML 4.01 过渡型 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HTML 4.01 框架集型 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- XHTML 1.0 过渡型 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- XHTML 1.0 框架集型 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;标准模式和准标准模式非常接近，差异几乎可以忽略不计，因此一般都称为标准模式。&lt;/p&gt;
&lt;h4 id=&quot;noscript元素&quot;&gt;&lt;a href=&quot;#noscript元素&quot; class=&quot;headerlink&quot; title=&quot;noscript元素&quot;&gt;&lt;/a&gt;noscript元素&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;元素可以指定在不支持脚本的浏览器中显示的替代内容。但在启用了脚本&lt;br&gt;的情况下，浏览器不会显示&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;元素中的任何内容。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;第3章-基本概念&quot;&gt;&lt;a href=&quot;#第3章-基本概念&quot; class=&quot;headerlink&quot; title=&quot;第3章 基本概念&quot;&gt;&lt;/a&gt;第3章 基本概念&lt;/h3&gt;&lt;h4 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h4&gt;&lt;p&gt;ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。&lt;/p&gt;
&lt;p&gt;标识符：指变量、函数、属性名，或者函数的参数。&lt;br&gt;规则：第一个字符必须是一个字母、下划线或美元符；其他字符可以是字母、下划线、美元符或数字。&lt;br&gt;ECMAScript 标识符一般采用驼峰大小写格式。&lt;/p&gt;
&lt;p&gt;注释：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 单行注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 多行块级注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;严格模式：&lt;br&gt;ECMAScript5 引入了严格模式的概念。严格模式是为 JavaScript 定义了一种不同的解析和执行模型。&lt;br&gt;在严格模式下，ECMAScript3 中的一些不确定的行为将得到处理，而且对某些不安全的操作也会抛出错误。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在整个脚本中启用严格模式：在顶部添加如下代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数在严格模式下执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &quot;use strict&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// doSomething.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt;是一个编译指示（pragma），用于告诉支持的JavaScript引擎切换到严格模式。&lt;/p&gt;
&lt;p&gt;语句：推荐语句结尾加分号。&lt;/p&gt;
&lt;h4 id=&quot;关键字和保留字&quot;&gt;&lt;a href=&quot;#关键字和保留字&quot; class=&quot;headerlink&quot; title=&quot;关键字和保留字&quot;&gt;&lt;/a&gt;关键字和保留字&lt;/h4&gt;&lt;p&gt;关键字和保留字：均不能用作标识符。&lt;br&gt;严格模式和非严格模式对保留字的限制不同。&lt;/p&gt;
&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;p&gt;ECMAScript的变量是松散类型（弱类型）的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message; &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message = &lt;span class=&quot;string&quot;&gt;&quot;hi&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;message = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 有效，但不推荐&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 var 操作符定义的变量将成为定义该变量的作用域中的局部变量，即该变量在函数退出后就会被销毁。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message = &lt;span class=&quot;string&quot;&gt;&quot;hi&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(message); &lt;span class=&quot;comment&quot;&gt;// message is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = &lt;span class=&quot;string&quot;&gt;&quot;hi&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(); &lt;span class=&quot;comment&quot;&gt;// 必须调用过一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(message); &lt;span class=&quot;comment&quot;&gt;// &quot;hi&quot;, 全局变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：不推荐通过省略var操作符定义全局变量。&lt;br&gt;在严格模式下，给未声明的变量赋值会抛出 ReferenceError 错误。&lt;/p&gt;
&lt;h4 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h4&gt;&lt;p&gt;ECMAScript 中有5种简单数据类型（基本数据类型）：Undefined、Null、Boolean、Number 和 String，还有1种复杂数据类型：Object（本质上是由一组无序的key-value对组成）。&lt;br&gt;ECMAScript 不支持任何创建自定义类型的机制。&lt;/p&gt;
&lt;p&gt;typeof 操作符：检测给定变量的数据类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“undefined”：未定义&lt;/li&gt;
&lt;li&gt;“boolean”：布尔值&lt;/li&gt;
&lt;li&gt;“string”：字符串&lt;/li&gt;
&lt;li&gt;“number”：数值&lt;/li&gt;
&lt;li&gt;“object”：对象或 null（null 被认为是空的对象引用）&lt;/li&gt;
&lt;li&gt;“function”：函数（在 ECMAScript 中是对象，不是一种数据类型，但有必要和对象区分）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Undefined-类型&quot;&gt;&lt;a href=&quot;#Undefined-类型&quot; class=&quot;headerlink&quot; title=&quot;Undefined 类型&quot;&gt;&lt;/a&gt;Undefined 类型&lt;/h5&gt;&lt;p&gt;Undefined 类型只有一个字面值：undefined。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(message); &lt;span class=&quot;comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(age); &lt;span class=&quot;comment&quot;&gt;// 错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;未声明的变量只能执行一项操作：用 typeof 检测数据类型。&lt;/p&gt;
&lt;p&gt;未初始化和未声明的变量执行 typeof 操作符都返回 undefined值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; message); &lt;span class=&quot;comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; age); &lt;span class=&quot;comment&quot;&gt;// &quot;undefined&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Null-类型&quot;&gt;&lt;a href=&quot;#Null-类型&quot; class=&quot;headerlink&quot; title=&quot;Null 类型&quot;&gt;&lt;/a&gt;Null 类型&lt;/h5&gt;&lt;p&gt;Null 类型只有一个字面值：null。null 值表示一个空对象指针。&lt;/p&gt;
&lt;p&gt;undefined 值是派生自 null 值的。但它们的用途完全不同。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Boolean-类型&quot;&gt;&lt;a href=&quot;#Boolean-类型&quot; class=&quot;headerlink&quot; title=&quot;Boolean 类型&quot;&gt;&lt;/a&gt;Boolean 类型&lt;/h5&gt;&lt;p&gt;Boolean 类型有两个字面值：true 和 false（一定要是小写）。&lt;/p&gt;
&lt;p&gt;其他类型和 Boolean 类型的转换（通过转型函数 Boolean()）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数据类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;转换为 true 的值&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;转换为 false 的值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;true&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;String&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;任何非空字符串&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;“”（空字符串）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Number&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;任何非零数字值（包括无穷大）&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0 和 NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Object&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;任何对象&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Undefined&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;n/a&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;undefined&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;流控制语句（如 if 语句）会自动执行相应的 Boolean 转换：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message = &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (message) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Number-类型&quot;&gt;&lt;a href=&quot;#Number-类型&quot; class=&quot;headerlink&quot; title=&quot;Number 类型&quot;&gt;&lt;/a&gt;Number 类型&lt;/h5&gt;&lt;p&gt;Number 类型使用 IEEE754 来表示整数和浮点数值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;number&quot;&gt;55&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 十进制整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;number&quot;&gt;070&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 八进制数 56&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;number&quot;&gt;079&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 无效的八进制数，解析为79&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num4 = &lt;span class=&quot;number&quot;&gt;0xA&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 十六进制数 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num5 = &lt;span class=&quot;number&quot;&gt;0x1f&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 十六进制数 31&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在严格模式下，八进制字面量是无效的，会抛出错误。&lt;/p&gt;
&lt;p&gt;在进行算术计算时，所有以八进制和十六进制表示的数值最终都被转换成十进制数值。&lt;/p&gt;
&lt;p&gt;浮点数值：&lt;br&gt;保存浮点数值需要的内存空间是整数值的两倍，所以如果 ECMAScript 会不失时机地将付点数值转换为整数值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 解析为整数 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 解析为整数 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;number&quot;&gt;3.14e12&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 3.14 × 10 ^ 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ECMAScript 会把小数点后面带6个零以上的浮点数值转换为以e表示法表示的数值。&lt;br&gt;浮点数值的最高精度是17位小数，在进行算术计算时精确度远远不如整数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 0.30000000000000004，是 IEEE754 的通病&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数值范围：&lt;br&gt;Number.MIN_VALUE：ECMAScript 能够表示的最小数值&lt;br&gt;Number.MAX_VALUE：ECMAScript 能够表示的最大数值&lt;br&gt;Number.POSITIVE_INFINITY：Infinity&lt;br&gt;Number.NEGATIVE_INFINITY：-Infinity&lt;br&gt;超过最大数值：自动转换成 Infinity 或 - Infinity 值&lt;br&gt;超过最小数值：转换为0&lt;br&gt;isFinite()：检测数值是否有穷的函数&lt;/p&gt;
&lt;p&gt;NaN：&lt;br&gt;NaN，Not a Number，非数值。&lt;br&gt;0除以0返回 NaN。h&lt;br&gt;NaN与任何值都不相等，包括NaN本身。&lt;br&gt;isNaN()：判断值是否“不是数值”的函数&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;isNaN&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// false，可以被转换成数值10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;isNaN&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// false，可以被转换成数值1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数值转换的三个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Number()函数：&lt;br&gt;Boolean值：true - 1, false - 0&lt;br&gt;数字值：一致&lt;br&gt;null值：0&lt;br&gt;字符串：如果能转换为数值则转换为数值；如果字符串为空，则转换为0；否则转换为 NaN&lt;br&gt;对象：先调用对象的 valueOf() 方法，根据前面规则转换。如果结果是 NaN，则调用对象的 toString() 方法，再根据前面规则转换&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;000011&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num4 = &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;parseInt()函数：&lt;br&gt;传入参数为字符串和基数（即使用的进制，可选）&lt;br&gt;该函数会从第一个字符开始解析&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;blue1234&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;1234blue&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 1234&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;70&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 70，十进制数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;070&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 56，八进制数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0xf&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 15，十六进制数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;22.5&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但在ECMAScript 5 中，parseInt() 不具有解析八进制值的能力，会忽略前导零。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;AF&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 175&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;建议明确指定基数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;parseFloat()函数：&lt;br&gt;传入参数为字符串&lt;br&gt;该函数也会从第一个字符开始解析&lt;br&gt;该函数始终忽略前导零&lt;br&gt;如果字符串包含的是可解析为整数的数，会返回整数值&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;blue1234&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;1234blue&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 1234&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num3 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0xA&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num4 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;22.5&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 22.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num5 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;22.34.5&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 22.34&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num6 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0908.5&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 908.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num7 = &lt;span class=&quot;built_in&quot;&gt;parseFloat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;3.125e7&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 31250000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;String-类型&quot;&gt;&lt;a href=&quot;#String-类型&quot; class=&quot;headerlink&quot; title=&quot;String 类型&quot;&gt;&lt;/a&gt;String 类型&lt;/h5&gt;&lt;p&gt;用双引号和单引号表示的字符串完全相同，但必须左右匹配。&lt;/p&gt;
&lt;p&gt;字符字面量：即转义序列，用于表示非打印字符和其他用途的字符。&lt;/p&gt;
&lt;p&gt;ECMAScript中的字符串是不可变的，一旦创建字符串的值就不能改变。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(text.length); &lt;span class=&quot;comment&quot;&gt;// 字符串的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ageAsString = age.toString(); &lt;span class=&quot;comment&quot;&gt;// 转换为字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数值、布尔值、对象和字符串值都有 toString() 方法，字符串的 toString() 返回该字符串的一个副本。null 和 undefined 值没有这个方法。&lt;/p&gt;
&lt;p&gt;toString() 可以传入一个参数：输出数值的基数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num.toString(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// &quot;a&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转型函数 String()：可以将任何类型的值转换为字符串。&lt;br&gt;如果值有 toString() 方法，则调用该方法；&lt;br&gt;如果值是 null，则返回 “null”；&lt;br&gt;如果值是 undefined，则返回 “undefined”。&lt;/p&gt;
&lt;h5 id=&quot;Object-类型&quot;&gt;&lt;a href=&quot;#Object-类型&quot; class=&quot;headerlink&quot; title=&quot;Object 类型&quot;&gt;&lt;/a&gt;Object 类型&lt;/h5&gt;&lt;p&gt;ECMAScript 中的对象是一组数据和功能的集合。Ojecect 是所有对象的基础。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;// 创建一个 Object 的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Object 的每个实例都具有下列的属性和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor：保存用于创建当前对象的函数，即构造函数。&lt;/li&gt;
&lt;li&gt;hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中是否存在，propertyName 是字符串。&lt;/li&gt;
&lt;li&gt;isPrototypeOf(object)：用于检查对象是否是传入对象 object 的原型。&lt;/li&gt;
&lt;li&gt;propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用 for-in 语句来枚举。&lt;/li&gt;
&lt;li&gt;toLocaleString()：返回对象的字符串表示（与执行环境的地区对应）。&lt;/li&gt;
&lt;li&gt;toString()：返回对象的字符串表示。&lt;/li&gt;
&lt;li&gt;valueOf()：返回对象的字符串、数值或布尔值表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;宿主对象如 BOM 和 DOM 中的对象，不一定会继承 Object。&lt;/p&gt;
&lt;h4 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h4&gt;&lt;p&gt;操作符包括算术操作符、位操作符、关系操作符和相等操作符。&lt;/p&gt;
&lt;h5 id=&quot;一元操作符&quot;&gt;&lt;a href=&quot;#一元操作符&quot; class=&quot;headerlink&quot; title=&quot;一元操作符&quot;&gt;&lt;/a&gt;一元操作符&lt;/h5&gt;&lt;p&gt;递增和递减操作符：注意前置和后置的区别。&lt;/p&gt;
&lt;p&gt;这四个操作符对任何值都适用，遵循以下规则（最终都转换成数值变量）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含有效数字字符的字符串：先转换为数字值再操作；&lt;/li&gt;
&lt;li&gt;不包含有效数字字符的字符串：将变量的值设置为 NaN；&lt;/li&gt;
&lt;li&gt;布尔值 false：先转换为 0 再操作；&lt;/li&gt;
&lt;li&gt;布尔值 true：先转换为 1 再操作；&lt;/li&gt;
&lt;li&gt;浮点数值：正常操作；&lt;/li&gt;
&lt;li&gt;对象：先调用对象的 valueOf() 方法获取一个可供操作的值，再应用上述规则；如果结果是 NaN，再调用 toString() 方法，应用上述规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一元加和减操作符：对非数值应用一元操作符时，会像 Number() 转型函数一样对值执行转换。&lt;/p&gt;
&lt;h5 id=&quot;位操作符&quot;&gt;&lt;a href=&quot;#位操作符&quot; class=&quot;headerlink&quot; title=&quot;位操作符&quot;&gt;&lt;/a&gt;位操作符&lt;/h5&gt;&lt;p&gt;位操作符是按内存中表示数值的位来操作数值。ECMAScript 中所有数据都以 IEEE 754 64位格式存储，但位操作符先把64位的值转换为32位的值然后操作，最后转换回64位。&lt;/p&gt;
&lt;p&gt;对于有符号整数，32位中的前31位用于表示整数的值，第32位表示数值的符号（符号位），0为正数，1为负数。&lt;/p&gt;
&lt;p&gt;负数：二进制补码，取反加一。&lt;/p&gt;
&lt;p&gt;对特殊的 NaN 和 Infinity 值应用位操作时，这两个值会被当成0来处理。&lt;/p&gt;
&lt;p&gt;如果对非数值应用位操作符，会先用 Number() 函数转换为一个数值，然后应用位操作。&lt;/p&gt;
&lt;p&gt;按位非（NOT）：用 ~ 表示，结果是数值的反码。本质：操作数的负值再减1。&lt;/p&gt;
&lt;p&gt;按位与（AND）：用 &amp;amp; 表示。&lt;/p&gt;
&lt;p&gt;按位或（OR）：用 | 表示。&lt;/p&gt;
&lt;p&gt;按位异或（XOR）：用 ^ 表示，两位相同返回0，两位不同返回1。&lt;/p&gt;
&lt;p&gt;左移： 用 &amp;lt;&amp;lt; 表示，不会影响操作数的符号位。&lt;/p&gt;
&lt;p&gt;有符号右移：用 &amp;gt;&amp;gt; 表示，会用符号位的值填充左边的空位。&lt;/p&gt;
&lt;p&gt;无符号右移：用 &amp;gt;&amp;gt;&amp;gt; 表示，会将数值的所有32位都向右移动。最终结果是无符号的，不考虑符号位。&lt;/p&gt;
&lt;h5 id=&quot;布尔操作符&quot;&gt;&lt;a href=&quot;#布尔操作符&quot; class=&quot;headerlink&quot; title=&quot;布尔操作符&quot;&gt;&lt;/a&gt;布尔操作符&lt;/h5&gt;&lt;p&gt;布尔操作符可用于任何值，会先转换为布尔值，再执行布尔操作（同 Boolean() 转型函数）。&lt;/p&gt;
&lt;p&gt;逻辑非（NOT）：用 ! 表示。&lt;/p&gt;
&lt;p&gt;逻辑与（AND）：用 &amp;amp;&amp;amp; 表示。&lt;/p&gt;
&lt;p&gt;逻辑或（OR）：用 || 表示。&lt;/p&gt;
&lt;p&gt;对于逻辑与和逻辑或，在有一个操作数不是布尔值的情况下，结果不一定返回布尔值。&lt;/p&gt;
&lt;p&gt;逻辑与遵循的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果第一个操作数是对象，则返回第二个操作数。&lt;/li&gt;
&lt;li&gt;如果第二个操作数是对象，则只有在第一个操作数求值结果为 true 时才会返回该对象。&lt;/li&gt;
&lt;li&gt;如果都是对象，则返回第二个操作数。&lt;/li&gt;
&lt;li&gt;如果有一个是 null/NaN/undefined，则返回 null/NaN/undefined。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑或遵循的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果第一个操作数是对象，则返回第一个操作数。&lt;/li&gt;
&lt;li&gt;如果第一个操作数的求值结果是 false，则返回第二个操作数。&lt;/li&gt;
&lt;li&gt;如果都是对象，则返回第一个操作数。&lt;/li&gt;
&lt;li&gt;如果两个操作数都是 null/NaN/undefined，则返回 null/NaN/undefined。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逻辑与/逻辑或操作属于短板操作，如果第一个操作数能决定结果，就不对第二个操作数求值。&lt;/p&gt;
&lt;h5 id=&quot;乘性操作符&quot;&gt;&lt;a href=&quot;#乘性操作符&quot; class=&quot;headerlink&quot; title=&quot;乘性操作符&quot;&gt;&lt;/a&gt;乘性操作符&lt;/h5&gt;&lt;p&gt;3个乘性操作符：乘法（&lt;code&gt;*&lt;/code&gt;）、除法（/）和求模（%）。&lt;/p&gt;
&lt;p&gt;乘法的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果操作数都是数值，则执行常规乘法计算，超出范围返回 Infinity 或 -Infinity。&lt;/li&gt;
&lt;li&gt;如果有一个是 NaN，则结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果 Infinity 和 0 相乘，结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果 Infinity 和非0数值相乘，结果是 Infinity 或 -Infinity（取决于非0数值的符号）。&lt;/li&gt;
&lt;li&gt;如果 Infinity 和 Infinity 相乘，结果是 Infinity。&lt;/li&gt;
&lt;li&gt;如果有一个不是数值，则调用 Number() 先转换成数值，然后应用规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除法的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果操作数都是数值，则执行常规除法计算，超出范围返回 Infinity 或 -Infinity。&lt;/li&gt;
&lt;li&gt;如果有一个是 NaN，则结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果 Infinity 被 Infinity 除，结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果0被0除，结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果非0的有限数被0除，结果是 Infinity 或 - Infinity（取决于非0数值的符号）。&lt;/li&gt;
&lt;li&gt;如果 Infinity 被任何非0数除，结果是 Infinity 或 - Infinity（取决于非0数值的符号）。&lt;/li&gt;
&lt;li&gt;如果有一个不是数值，则调用 Number() 先转换成数值，然后应用规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求模的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果操作数都是数值，执行常规除法计算，返回除得的余数。&lt;/li&gt;
&lt;li&gt;如果被除数无限大、除数有限大，结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果被除数有限大、除数是0，结果是NaN。&lt;/li&gt;
&lt;li&gt;如果 Infinity 被 Infinity 除，结果是 NaN。&lt;/li&gt;
&lt;li&gt;如果被除数有限大、除数无限大，结果是被除数。&lt;/li&gt;
&lt;li&gt;如果被除数是0，结果是0。&lt;/li&gt;
&lt;li&gt;如果有一个不是数值，则调用 Number() 先转换成数值，然后应用规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;加性操作符&quot;&gt;&lt;a href=&quot;#加性操作符&quot; class=&quot;headerlink&quot; title=&quot;加性操作符&quot;&gt;&lt;/a&gt;加性操作符&lt;/h5&gt;&lt;p&gt;加法的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个操作数都是数值：&lt;ul&gt;
&lt;li&gt;如果有一个是 NaN，结果是 NaN。&lt;/li&gt;
&lt;li&gt;Infinity + Infinity = Infinity。&lt;/li&gt;
&lt;li&gt;-Infinity + -Infinity = -Infinity。&lt;/li&gt;
&lt;li&gt;Infinity + -Infinity = NaN。&lt;/li&gt;
&lt;li&gt;+0 + +0 = +0。&lt;/li&gt;
&lt;li&gt;-0 + -0 = -0。&lt;/li&gt;
&lt;li&gt;+0 + -0 = +0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有一个操作数是字符串：&lt;ul&gt;
&lt;li&gt;两个都是字符串：拼接。&lt;/li&gt;
&lt;li&gt;一个是字符串：另一个操作数转换为字符串，然后拼接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有一个操作数是对象、数值或布尔值：&lt;br&gt;调用 toString() 获得字符串值，然后应用上述规则。&lt;/li&gt;
&lt;li&gt;对于 undefined 和 null：&lt;br&gt;分别调用String() 函数取得字符串 “undefined” 和 “null”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;减法的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个操作数都是数值：&lt;ul&gt;
&lt;li&gt;如果有一个是 NaN，结果是 NaN。&lt;/li&gt;
&lt;li&gt;Infinity - Infinity = NaN&lt;/li&gt;
&lt;li&gt;-Infinity - -Infinity = -NaN&lt;/li&gt;
&lt;li&gt;Infinity - -Infinity = Infinity。&lt;/li&gt;
&lt;li&gt;-Infinity - Infinity = -Infinity。&lt;/li&gt;
&lt;li&gt;+0 - +0 = +0。&lt;/li&gt;
&lt;li&gt;+0 - -0 = -0。&lt;/li&gt;
&lt;li&gt;-0 - -0 = +0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有一个操作数是字符串、布尔值、null 或 undefined：&lt;br&gt;先调用 Number() 函数转换为数值，然后根据上述规则计算。如果转换得到 NaN，结果就是 NaN。&lt;/li&gt;
&lt;li&gt;如果有一个操作数是对象：&lt;br&gt;调用 valueOf() 方法获得表示对象的数值，如果得到 NaN，则结果是 NaN。如果没有 valueOf() 方法，则调用 toString() 方法获得字符串，再转换成数值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;关系操作符&quot;&gt;&lt;a href=&quot;#关系操作符&quot; class=&quot;headerlink&quot; title=&quot;关系操作符&quot;&gt;&lt;/a&gt;关系操作符&lt;/h5&gt;&lt;p&gt;关系操作符有：&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;，返回值是布尔值。&lt;/p&gt;
&lt;p&gt;关系操作符的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个操作数都是数值，执行数值比较。&lt;/li&gt;
&lt;li&gt;如果两个都是字符串，则比较字符串对应的字符编码值。&lt;/li&gt;
&lt;li&gt;如果一个是数值，则将另一个转换为数值，然后执行数值比较。&lt;/li&gt;
&lt;li&gt;如果一个是对象，则调用 valueOf() 方法，如果没有，则调用 toString() 方法。&lt;/li&gt;
&lt;li&gt;如果一个是布尔值，先将布尔值转换为数值，然后执行数值比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何数值跟 NaN 进行关系比较，结果都是 false（字符串不能转换成数值则会转换为 NaN）。&lt;/p&gt;
&lt;h5 id=&quot;相等操作符&quot;&gt;&lt;a href=&quot;#相等操作符&quot; class=&quot;headerlink&quot; title=&quot;相等操作符&quot;&gt;&lt;/a&gt;相等操作符&lt;/h5&gt;&lt;p&gt;相等和不相等：用 == 和 != 表示。会先转换操作数（强制转型），然后比较相等性。&lt;/p&gt;
&lt;p&gt;相等和不相等的特殊规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有一个是布尔值，则先转换成数值。&lt;/li&gt;
&lt;li&gt;如果有一个是字符串，另一个是数值，则先转换成数值。&lt;/li&gt;
&lt;li&gt;如果有一个是对象，另一个不是，则调用对象的 valueOf() 方法得到基本类型值。&lt;/li&gt;
&lt;li&gt;null 和 undefined 是相等的。&lt;/li&gt;
&lt;li&gt;null 和undefined 不能转换成其他任何值。&lt;/li&gt;
&lt;li&gt;如果有一个是 NaN，相等操作符返回 false，不相等操作符返回 true。如果两个都是 NaN，相等操作符也返回 false。&lt;/li&gt;
&lt;li&gt;如果两个都是对象，比较是不是同一个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全等和不全等：用 === 和 !== 表示。只有在两个操作数未经转换就相等/不相等的情况下才返回 true。&lt;/p&gt;
&lt;h5 id=&quot;条件操作符&quot;&gt;&lt;a href=&quot;#条件操作符&quot; class=&quot;headerlink&quot; title=&quot;条件操作符&quot;&gt;&lt;/a&gt;条件操作符&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;variable = boolean_expression ? true_value : false_value;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;赋值操作符&quot;&gt;&lt;a href=&quot;#赋值操作符&quot; class=&quot;headerlink&quot; title=&quot;赋值操作符&quot;&gt;&lt;/a&gt;赋值操作符&lt;/h5&gt;&lt;p&gt;赋值操作符：=、&lt;code&gt;*=&lt;/code&gt;、/=、%=、+=、-=、&lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;（有符号）、&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;（无符号）。&lt;/p&gt;
&lt;h5 id=&quot;逗号操作符&quot;&gt;&lt;a href=&quot;#逗号操作符&quot; class=&quot;headerlink&quot; title=&quot;逗号操作符&quot;&gt;&lt;/a&gt;逗号操作符&lt;/h5&gt;&lt;p&gt;逗号操作符用于声明多个变量和赋值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, num2 = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; num3 = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = (&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// num = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;语句&quot;&gt;&lt;a href=&quot;#语句&quot; class=&quot;headerlink&quot; title=&quot;语句&quot;&gt;&lt;/a&gt;语句&lt;/h4&gt;&lt;h5 id=&quot;if-语句&quot;&gt;&lt;a href=&quot;#if-语句&quot; class=&quot;headerlink&quot; title=&quot;if 语句&quot;&gt;&lt;/a&gt;if 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (condition) statement1 &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; statement2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;condition（条件）可以是任意表达式，表达式求值结果不一定是布尔值，结果会自动调用 Boolean() 转换函数转换为一个布尔值。&lt;/p&gt;
&lt;h5 id=&quot;do-while-语句&quot;&gt;&lt;a href=&quot;#do-while-语句&quot; class=&quot;headerlink&quot; title=&quot;do-while 语句&quot;&gt;&lt;/a&gt;do-while 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (expression);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;while-语句&quot;&gt;&lt;a href=&quot;#while-语句&quot; class=&quot;headerlink&quot; title=&quot;while 语句&quot;&gt;&lt;/a&gt;while 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (expression) statement;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;for-语句&quot;&gt;&lt;a href=&quot;#for-语句&quot; class=&quot;headerlink&quot; title=&quot;for 语句&quot;&gt;&lt;/a&gt;for 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (initialization; expression; post-loop-expresstion) statement&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;for-in-语句&quot;&gt;&lt;a href=&quot;#for-in-语句&quot; class=&quot;headerlink&quot; title=&quot;for-in 语句&quot;&gt;&lt;/a&gt;for-in 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (property &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; expresstion) statement&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;遍历 BOM 中 window 对象的所有属性：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propName &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(propName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ECMAScript 对象的属性没有顺序。&lt;/p&gt;
&lt;p&gt;ECMAScript 5之前：如果要迭代的对象的变量值是 null 或 undefined，会抛出错误；ECMAScript 5 中：不执行循环体。&lt;/p&gt;
&lt;h5 id=&quot;label-语句&quot;&gt;&lt;a href=&quot;#label-语句&quot; class=&quot;headerlink&quot; title=&quot;label 语句&quot;&gt;&lt;/a&gt;label 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;start: &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// doSomething&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;start就是label，用于 break 或 continue 语句的引用。&lt;/p&gt;
&lt;h5 id=&quot;break-和-continue-语句&quot;&gt;&lt;a href=&quot;#break-和-continue-语句&quot; class=&quot;headerlink&quot; title=&quot;break 和 continue 语句&quot;&gt;&lt;/a&gt;break 和 continue 语句&lt;/h5&gt;&lt;p&gt;break：立即退出循环；continue：退出该轮循环。&lt;/p&gt;
&lt;h5 id=&quot;with-语句&quot;&gt;&lt;a href=&quot;#with-语句&quot; class=&quot;headerlink&quot; title=&quot;with 语句&quot;&gt;&lt;/a&gt;with 语句&lt;/h5&gt;&lt;p&gt;with 语句的作用是将代码的作用域设置到一个特定的对象中。目的是简化多次 编写同一个对象的工作。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qs = location.search.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hostName = location.hostname;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = location.href;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用 with 语句关联 location 对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;(location) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qs = search.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hostName = hostname;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = href;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 with 语句代码块内部，每个变量首先被认为是一个局部变量，如果再局部环境中找不到变量的定义，就会查询 location 对象中是否有同名的属性。&lt;/p&gt;
&lt;p&gt;严格模式下不允许使用 with 语句。&lt;/p&gt;
&lt;h5 id=&quot;switch-语句&quot;&gt;&lt;a href=&quot;#switch-语句&quot; class=&quot;headerlink&quot; title=&quot;switch 语句&quot;&gt;&lt;/a&gt;switch 语句&lt;/h5&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (expression) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; value: statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; value: statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; value: statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: statement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以在 switch 语句中使用任何数据类型。每个 case 的值可以是常量、变量和表达式。&lt;/p&gt;
&lt;p&gt;switch 语句在比较值时使用的是全等操作符。&lt;/p&gt;
&lt;h4 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;functionName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arg0, arg1, ..., argN&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;return 语句如果不带任何返回值，则函数停止执行之后返回 undefined 值。&lt;/p&gt;
&lt;p&gt;严格模式下函数的一些限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能把函数和参数命名为 eval 或 arguments。&lt;/li&gt;
&lt;li&gt;不能出项两个命名参数同名的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ECMAScript 中的参数在内部是用一个数组表示的，函数接收到的始终是这个数组。在函数体内可以通过 arguments 对象来访问这个参数数组。arguments 对象并不是 Array 的实例，只是与数组类似。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 隐式使用命名参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length); &lt;span class=&quot;comment&quot;&gt;// 参数个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;arguments 的值永远和对应命名参数的值保持同步。两个值的内存空间是独立的，但它们的值会同步。&lt;/p&gt;
&lt;p&gt;arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。&lt;/p&gt;
&lt;p&gt;没有传递值的命名参数将自动被赋予 undefined 值。&lt;/p&gt;
&lt;p&gt;ECMAScript 中所有的参数传递都是值传递，并没有引用传递。&lt;/p&gt;
&lt;p&gt;ECMAScript函数没有真正意义上的重载。如果定义了两个名字相同的函数，则该名字只属于后定义的函数。&lt;/p&gt;
&lt;p&gt;可以通过检查传入函数中参数的类型和数量并作出不同的反应来模拟重载。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;（第 1 至 3 章 完）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第1章-JavaScript-简介&quot;&gt;&lt;a href=&quot;#第1章-JavaScript-简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 JavaScript 简介&quot;&gt;&lt;/a&gt;第1章 JavaScript 简介&lt;/h3&gt;&lt;h4 id=&quot;JavaS
    
    </summary>
    
    
      <category term="Web" scheme="http://blog.kass.top/tags/Web/"/>
    
      <category term="JavaScript" scheme="http://blog.kass.top/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://blog.kass.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>之前面试遇到的一道智力题</title>
    <link href="http://blog.kass.top/2016/03/04/a-brain-teaser-in-an-interview/"/>
    <id>http://blog.kass.top/2016/03/04/a-brain-teaser-in-an-interview/</id>
    <published>2016-03-04T04:20:31.000Z</published>
    <updated>2016-03-15T13:36:21.515Z</updated>
    
    <content type="html">&lt;p&gt;大二的时候参加了一次某外企实习生招聘的群面，其中有一道题目是智力题，题目大致就是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给一个瞎子52张扑克牌，并告诉他里面恰好有10张牌是正面朝上的。要求这个瞎子把牌分成两堆，使得每堆牌里正面朝上的牌的张数一样多。瞎子应该怎么做？（瞎子摸不出牌是正面或者是反面，但是却可以随意翻动每一张牌）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当给出这道题目的时候，我还不知道这究竟是道什么类型的题目，该往什么方向去思考。当时是三个人一组一起讨论，我们一开始的思路都是偏向于概率论之类的数学思维上…所以最后也没能找到正确的答案。后来面试结束的时候，有同学就赶紧百度，结果发现答案却如此简单，只要找对了方向就好…&lt;/p&gt;
&lt;p&gt;我们先把52张牌分成两堆A和B，A堆中10张，B堆中42张。那么假设A堆中有m张正面，则有(10-m)张反面，B堆中有n张正面，则有(42-n)张反面。我们知道，m+n=10。那么可以把A堆翻过来，那么有(10-m)张正面，m张反面。显然这时候10-m=n，所以两堆牌里正面朝上的牌数一样多。&lt;/p&gt;
&lt;p&gt;当时没想出来的原因主要还是被题目的条件迷惑到了，他说“使得每堆牌里正面朝上的牌的张数一样多”，这并不需要保证两堆牌中每堆正面的牌都是5张，只要相同就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大二的时候参加了一次某外企实习生招聘的群面，其中有一道题目是智力题，题目大致就是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给一个瞎子52张扑克牌，并告诉他里面恰好有10张牌是正面朝上的。要求这个瞎子把牌分成两堆，使得每堆牌里正面朝上的牌的张数一样多。瞎子应该怎么做？
    
    </summary>
    
    
      <category term="面试" scheme="http://blog.kass.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="智力题" scheme="http://blog.kass.top/tags/%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>同源策略和AJAX跨域请求的解决方案</title>
    <link href="http://blog.kass.top/2016/03/03/same-origin-policy-and-solutions-for-cross-origin-ajax-request/"/>
    <id>http://blog.kass.top/2016/03/03/same-origin-policy-and-solutions-for-cross-origin-ajax-request/</id>
    <published>2016-03-02T19:06:21.000Z</published>
    <updated>2016-03-15T13:36:24.813Z</updated>
    
    <content type="html">&lt;p&gt;之前写Web项目的时候一般都是用AJAX调用服务器提供的接口获得数据，但后来遇到了AJAX由于不同源而不用跨域请求的问题。为了实现AJAX跨域请求，我重新回顾了之前在《面向Web的计算》课上讲过的同源策略（Same Origin Policy, SOP），并了解AJAX跨域请求的几种常见的解决方案。结合网上的一些文章和参考资料，整理出下面的关于同源策略和AJAX跨域请求解决方案的笔记。&lt;/p&gt;
&lt;h3 id=&quot;同源策略（Same-Origin-Policy-SOP）&quot;&gt;&lt;a href=&quot;#同源策略（Same-Origin-Policy-SOP）&quot; class=&quot;headerlink&quot; title=&quot;同源策略（Same Origin Policy, SOP）&quot;&gt;&lt;/a&gt;同源策略（Same Origin Policy, SOP）&lt;/h3&gt;&lt;p&gt;同源策略，它是由 Netscape 提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略。&lt;/p&gt;
&lt;p&gt;所谓同源，是指域名、协议、端口都相同。如果两个页面的域名、协议和端口都相同，那么这两个页面就同源，属于同一个域（Domain ）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top&lt;/a&gt; 和 &lt;a href=&quot;http://www.kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.kass.top&lt;/a&gt; 不同源，因为域名不同&lt;br&gt;&lt;a href=&quot;http://kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top&lt;/a&gt; 和 &lt;a href=&quot;https://kass.top&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://kass.top&lt;/a&gt; 不同源，因为协议不同&lt;br&gt;&lt;a href=&quot;http://kass.top:80&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top:80&lt;/a&gt; 和 &lt;a href=&quot;http://kass.top:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top:8080&lt;/a&gt; 不同源，因为端口不同&lt;br&gt;&lt;a href=&quot;http://kass.top/tags&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top/tags&lt;/a&gt; 和 &lt;a href=&quot;http://kass.top/about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kass.top/about&lt;/a&gt; 同源&lt;/p&gt;
&lt;p&gt;同源策略限制了一个源中加载文本或脚本与来自其他源中资源的交互方式，简单的说就是一个源上的JS 只能访问当前源的资源。不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。这些资源包括：DOM、通过AJAX请求的网络资源、cookie等。需要遵循同源策略的地方有：跨frame脚本、跨window脚本、cookie访问、XMLHttpRequest请求等。&lt;/p&gt;
&lt;p&gt;那为什么像script、style、img标签可以引入不同源的文本或脚本呢？因为同源策略本身是在Web前端的安全性和灵活性选择了一个平衡点，同源策略允许这些标签跨域引用资源而不必部署在同一台服务器上。&lt;/p&gt;
&lt;h4 id=&quot;如果不遵循同源策略，会这么样呢？&quot;&gt;&lt;a href=&quot;#如果不遵循同源策略，会这么样呢？&quot; class=&quot;headerlink&quot; title=&quot;如果不遵循同源策略，会这么样呢？&quot;&gt;&lt;/a&gt;如果不遵循同源策略，会这么样呢？&lt;/h4&gt;&lt;p&gt;1.链接跳转的问题：假设有一个钓鱼页面 &lt;a href=&quot;http://money.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://money.com/&lt;/a&gt; ，诱导用户在这个页面上打开 &lt;a href=&quot;http://www.alipay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alipay.com/&lt;/a&gt; （使用window.open打开），这时候钓鱼页面就可以获取支付宝页面窗口的句柄即window对象，即获得了对支付宝页面的控制权，账号密码什么的也就轻而易举地获得了。&lt;br&gt;2.AJAX请求的问题： 假设在 &lt;a href=&quot;http://money.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://money.com/&lt;/a&gt; 页面发起一个对 &lt;a href=&quot;http://www.alipay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alipay.com/&lt;/a&gt; 某接口的AJAX请求，如果不遵循同源策略，那么这样的请求是允许的，此次HTTP请求所带的cookie当然是 &lt;a href=&quot;http://www.alipay.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alipay.com/&lt;/a&gt; 下的cookie，有了cookie，还有什么信息是不能获得的呢？&lt;/p&gt;
&lt;p&gt;可以看到，如果浏览器不遵循同源策略，将会存在很严重的安全性问题。但有的时候，我们需要在当前页面加载与其不同源的资源，比如AJAX跨域请求，在保证一定安全的情况下如何实现呢？&lt;/p&gt;
&lt;h3 id=&quot;AJAX跨域请求的解决方案&quot;&gt;&lt;a href=&quot;#AJAX跨域请求的解决方案&quot; class=&quot;headerlink&quot; title=&quot;AJAX跨域请求的解决方案&quot;&gt;&lt;/a&gt;AJAX跨域请求的解决方案&lt;/h3&gt;&lt;p&gt;AJAX（Asynchronous Javascript And XML），即异步Javascript和XML。AJAX的基础是XMLHttpRequest对象，之前提到过XMLHttpRequest对象是需要遵循同源策略的，所以AJAX跨域请求需要遵循同源策略。&lt;/p&gt;
&lt;p&gt;下面我们来验证一下AJAX的跨域请求。&lt;/p&gt;
&lt;p&gt;v1.com页面的代码如下，向v2.com发起一次AJAX请求。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//cdn.bootcss.com/jquery/2.2.1/jquery.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&quot;http://v2.com/&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;v2.com返回一个字符串success。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;控制台的输出结果如下，可以看到由于同源策略这样的AJAX跨域请求是不允许的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;XMLHttpRequest cannot load http://v2.com/. No &amp;apos;Access-Control-Allow-Origin&amp;apos; header is present on the requested resource. Origin &amp;apos;http://v1.com&amp;apos; is therefore not allowed access.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么如何解决AJAX的跨域问题，实现AJAX的跨域请求呢？下面给出几种常见的解决方案。&lt;/p&gt;
&lt;h4 id=&quot;通过CORS进行跨域&quot;&gt;&lt;a href=&quot;#通过CORS进行跨域&quot; class=&quot;headerlink&quot; title=&quot;通过CORS进行跨域&quot;&gt;&lt;/a&gt;通过CORS进行跨域&lt;/h4&gt;&lt;p&gt;CORS（Cross-Origin Resource Sharing ），跨域资源共享，是W3C XMLHttpRequest Level 2 里规定的一种跨域方式。CORS定义了一种浏览器和服务器交互的方式来确定是否允许跨域请求。通过CORS实现AJAX跨域请求比较简单，只需要由服务器发送一个响应标头（Response Header）。&lt;/p&gt;
&lt;p&gt;如今基本上所有常用的浏览器都支持CORS（老IE除外），在 &lt;a href=&quot;http://caniuse.com/#feat=cors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caniuse.com/#feat=cors&lt;/a&gt; 中可以查询到浏览器对CORS的支持情况。可以看到，Chrome、Firefox、Safari、Opera、Edge、IE11以及移动设备浏览器等均支持CORS，所以我认为CORS可能是最好的实现AJAX跨域请求的解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;caniuse.com 是一个提供HTML5, CSS3, JS等新技术浏览器兼容一览表的网站，可以提高前端开发的工作效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过CORS实现AJAX跨域请求，需要服务器设置一个响应标头：设置Access-Control-Allow-Origin。&lt;/p&gt;
&lt;p&gt;HTTP头的设置方法有很多，下面以Apache和PHP为例：&lt;/p&gt;
&lt;p&gt;1.Apache：需要开启mod_headers模块，在配置文件中和.htaccess文件中均可以加入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Header set Access-Control-Allow-Origin &amp;quot;*&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置为*即允许所有其他域发起的AJAX请求当前服务器的数据，这样是非常不安全的，所以应该设置为我们需要允许请求数据的域：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Header set Access-Control-Allow-Origin &amp;quot;http://v1.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置完之后，当我们访问v1.com时，控制台再也没有错误提示了，能够成功地获取v2.com的数据。&lt;/p&gt;
&lt;p&gt;2.PHP：直接在PHP代码中设置就好了：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Origin: http://v1.com&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，nginx、tomcat等都可以设置HTTP头，更多的设置见 &lt;a href=&quot;http://enable-cors.org/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://enable-cors.org/server.html&lt;/a&gt; 。可以在 &lt;a href=&quot;http://client.cors-api.appspot.com/client&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://client.cors-api.appspot.com/client&lt;/a&gt; 进行CORS的测试。&lt;/p&gt;
&lt;p&gt;通过CORS实现AJAX的跨域请求就这么简单，但有时候还是会遇到少数浏览器不兼容的情况，我们需要检测浏览器是否支持CORS，原生Javacript发送AJAX请求代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createCORSRequest = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;method, url&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;withCredentials&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xhr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断XMLHttpRequest对象中是否有withCredentials属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// withCredentials属性仅仅存在于XMLHTTPRequest2对象中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Chrome, Firefox, Opera and Safari 均使用XMLHTTPRequest2对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr.open(method, url, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; XDomainRequest != &lt;span class=&quot;string&quot;&gt;&quot;undefined&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断是否是XDomainRequest对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// XDomainRequest对象只存在于IE中，是IE用来实现CORS跨域请求的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XDomainRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr.open(method, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 浏览器不支持CORS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhr = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; xhr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&#39;http://v2.com&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method = &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = createCORSRequest(method, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!xhr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;CORS not supported&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Success code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; responseText = xhr.responseText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onerror = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Error code goes here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;There was an error!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;标准的CORS请求默认不发送任何cookies。为了发送请求时包含cookies，需要设置XMLHttpRequest对象的withCredentials属性：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xhr.withCredentials = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若使用jQuery则代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: &lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&quot;http://v2.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhrFields: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        withCredentials: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	&lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务器（PHP为例）同时也要设置相应的HTTP头：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;header(&lt;span class=&quot;string&quot;&gt;&quot;Access-Control-Allow-Credentials: true&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;withCredentials属性会使请求中包含请求域（v2.com）中的所有cookies，返回的响应也会包含请求域（v2.com）中的所有cookies。但需要注意的是这些cookies仍然遵循同源策略，所以你的JS代码不能访问document.cookie或者response headers中的cookies。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html5rocks.com/en/tutorials/cors/&lt;/a&gt; 中还提到simple requests和”not-so-simple requests” ，之后有时间再认真研究一下。&lt;/p&gt;
&lt;h4 id=&quot;使用JSONP实现跨域请求&quot;&gt;&lt;a href=&quot;#使用JSONP实现跨域请求&quot; class=&quot;headerlink&quot; title=&quot;使用JSONP实现跨域请求&quot;&gt;&lt;/a&gt;使用JSONP实现跨域请求&lt;/h4&gt;&lt;p&gt;JSONP的原理就是：因为&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签是不受同源策略限制的，没有跨域限制，JSONP就是利用这点来实现跨域请求。当需要进行跨域请求时，JS脚本动态地添加&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签的src属性指向所需地址，如生成&lt;code&gt;&amp;lt;script src=&amp;quot;http://v2.com&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;，然后JS和服务器约定一个回调函数名（默认为callback，不是callback的话需要以参数形式传给服务器），JS提供这个回调函数。服务器产生的响应为JSON数据的包装（即JSONP， JSON with Padding），如callback({“id”: 1, “name”, “vboar”})。这里的callback就是回调函数名，{“id”: 1, “name”, “vboar”}就是json数据，将作为callback函数的参数。这样的话，浏览器就会调用callback函数，并传递解析后的json对象作为参数，这样其实就能跨域接收数据了。&lt;/p&gt;
&lt;p&gt;用jQuery书写JSONP实现跨域请求的代码非常简单。&lt;/p&gt;
&lt;p&gt;前端JS代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&quot;http://v2.com&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    jsonp: &lt;span class=&quot;string&quot;&gt;&quot;callback&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataType: &lt;span class=&quot;string&quot;&gt;&quot;jsonp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后端PHP中不能直接返回JSON格式的数据，要返回 &lt;code&gt;回调函数(JSON数据)&lt;/code&gt; 这样形式的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;].&lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;.json_encode($arr).&lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用原生Javascript代码实现也不困难：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; callbackName = &lt;span class=&quot;string&quot;&gt;&#39;callback&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;[callbackName] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; script = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;script.src = &lt;span class=&quot;string&quot;&gt;&#39;http://v2.com?callback=&#39;&lt;/span&gt;+callbackName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述代码没有删除jsonp动态创建的节点，而jQuery方式会自动删除script节点。jQuery在onload/complete时，删除节点。除了删除节点，还需要删除节点上的属性吗？关于这点讨论，可以前往 &lt;a href=&quot;https://segmentfault.com/q/1010000000483131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/q/1010000000483131&lt;/a&gt; 查看。&lt;/p&gt;
&lt;p&gt;那JSONP和CORS实现跨域请求对比，两者又有什么优点和缺点呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CORS支持所有类型的HTTP请求，而JSON只支持GET请求；&lt;/li&gt;
&lt;li&gt;使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理；&lt;/li&gt;
&lt;li&gt;JSONP主要被老的浏览器支持（&amp;lt; IE8），它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现AJAX跨域请求还有其他的方案，但CORS和JSONP应该是目前最常用的两种解决方案了，而且CORS更先进更方便更灵活，应该是实现AJAX跨域请求的主流方案了，毕竟用IE老古董的人越来越少了呀。&lt;/p&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript的同源策略 - MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bbs.csdn.net/topics/390716390&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器同源策略 - CSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/4e17445d66e2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;同源策略——浏览器的安全卫士 - 流星狂飙 - 简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/25427931&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对于浏览器的同源策略你是怎样理解的呢？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://enable-cors.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;enable cross-origin resource sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using CORS - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/hfahe/article/details/7730944&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML5安全：CORS（跨域资源共享）简介 - 蒋宇捷 - CSDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iefans.net/ie10-cors-for-xhr/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IE10中的CORS for XHR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/f3840c8c02ba&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ajax - 跨域请求 - happyLindz - 简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is JSONP all about? - StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/19966531&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSONP 的工作原理是什么？ - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/q/1010000000483131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于JSONP的两点疑问 - SegmentFault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/9d0fb4f47cc0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript跨域问题小记 - 射覆 - 简书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前写Web项目的时候一般都是用AJAX调用服务器提供的接口获得数据，但后来遇到了AJAX由于不同源而不用跨域请求的问题。为了实现AJAX跨域请求，我重新回顾了之前在《面向Web的计算》课上讲过的同源策略（Same Origin Policy, SOP），并了解AJAX跨域
    
    </summary>
    
    
      <category term="Web" scheme="http://blog.kass.top/tags/Web/"/>
    
      <category term="安全" scheme="http://blog.kass.top/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="AJAX" scheme="http://blog.kass.top/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>真的开始写博客了&gt;_&lt;#</title>
    <link href="http://blog.kass.top/2016/03/02/start-up-my-blog/"/>
    <id>http://blog.kass.top/2016/03/02/start-up-my-blog/</id>
    <published>2016-03-02T08:01:17.000Z</published>
    <updated>2016-03-15T13:36:28.463Z</updated>
    
    <content type="html">&lt;p&gt;之前很多次都搭建了自己的博客，说要开始写博客，然而从大一都大三都没有实现= = 这几天忽然意识到自己真的已经大三了，而且要找实习了！！！然后发现自己两年多好像并没有学到什么东西…也就写了几个水水的大作业和项目。平时遇到什么问题和困难就百度谷歌一下，当时懂了就解决掉那个问题，然而过了很久之后…还是不懂…看别人写的技术博客感觉很有意思，然而过了很久什么都不记得…人懒啊，以至于读书笔记、学习笔记都不怎么写，更不用说博客了…那，去应聘的时候，我有什么资本说我很牛逼呢，凭什么让别人招了我。&lt;/p&gt;
&lt;p&gt;于是，这次真的下定决心了，即便花掉不少时间，也要认真地写博客，一是巩固自己对这方面的理解，二是将来可以回头看看，可以捡回来，说不定还有什么新的理解。&lt;/p&gt;
&lt;p&gt;新搭建的博客托管在GitHub Pages上。就近几天吧大致确定了自己未来的发展方向，目前暂时以Web前端开发为主吧，那博客的内容大多应该是围绕前端开发的吧= =&lt;/p&gt;
&lt;p&gt;最后希望自己能坚持下去，也希望内推面试要成功过啊！！！加油！！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前很多次都搭建了自己的博客，说要开始写博客，然而从大一都大三都没有实现= = 这几天忽然意识到自己真的已经大三了，而且要找实习了！！！然后发现自己两年多好像并没有学到什么东西…也就写了几个水水的大作业和项目。平时遇到什么问题和困难就百度谷歌一下，当时懂了就解决掉那个问题，
    
    </summary>
    
    
      <category term="日常" scheme="http://blog.kass.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
